datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum MembershipStatus {
  FREE
  PAID
}

enum Currency {
  BGN
  USD
  GBP
  EUR
}

enum ProductStatus {
  GONE
  SOLD
  NEW
  FIRE
}

enum TokenType {
  EMAIL // short-lived token sent to the user's email
  API
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Color {
  BLACK
  WHITE
}

model Sizing {
  id     String @id @default(uuid()) @db.VarChar(36)
  size   Size
  width  Float
  height Float
  sleeve Float
}

model Cart {
  size     Size
  color    Color
  quantity Int?  @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(36)

  productId String  @db.VarChar(36)
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, userId])
  @@map("cart")
}

model Product {
  id          String        @id @default(uuid()) @db.VarChar(36)
  name        String        @default("Unnamed")
  style       String        @default("")
  colorScheme String        @default("")
  price       Float         @default(0)
  currency    Currency      @default(EUR)
  status      ProductStatus @default(NEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users Ownership[]
  carts Cart[]

  @@map("product")
}

model Ownership {
  size  Size
  color Color

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(36)

  productId String  @db.VarChar(36)
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, userId])
  @@map("products_on_users")
}

model Membership {
  id   String           @id @default(uuid()) @db.VarChar(36)
  type MembershipStatus @default(FREE)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  expiresAt DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.VarChar(36)

  @@map("membership")
}

model User {
  id           String   @id @default(uuid()) @db.VarChar(36)
  alias        String
  email        String   @unique
  picture      String?
  currency     Currency @default(EUR)
  fromProvider Boolean? @default(false)
  role         Role     @default(USER)

  /// @TypeGraphQL.omit(output: true, input: false)
  salt String?
  hash String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  token      Token[]
  membership Membership?
  cart       Cart[]

  products Ownership[]

  @@map("user")
}

model Token {
  id         String    @id @default(uuid()) @db.VarChar(36)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("token")
}
